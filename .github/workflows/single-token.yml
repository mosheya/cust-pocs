name: CI

on:
  push:
    branches:
      - main
      - dev
      - multi-oidc
  pull_request:
    branches:
      - main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write #package for uploading attestation.
  contents: read

jobs:
  build-publish-maven:
      runs-on: ubuntu-latest
      env:
        DOCKER_REPO: 'optum-main-docker-virtual'
        IMAGE_NAME: 'my-very-cool-image-from-edge:${{ github.run_number }}'
        JF_URL: https://${{ vars.JF_URL }}/ 
        DOCKER_CLI_EXPERIMENTAL: enabled
        JFROG_PLATFORM_REPO: 'optum-main-maven-virtual'
        JF_PROJECT: optum-main

      steps:
          - name: Check out repository
            uses: actions/checkout@v4
        
          - name: Setup JFrog CLI
            id: setup-cli 
            uses: jfrog/setup-jfrog-cli@v4
            env:
                  JF_URL: https://psazeuwedge.jfrog.io/
            with:
                    oidc-provider-name: github-oidc-edge-group
                    oidc-audience: jfrog-github-edge-group-aud
                    #oidc-provider-name: github-oidc-edge
                    #oidc-audience: jfrog-github-edge
         
          - name: Get id token
            run: |
                    ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                    "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=jfrog-github-edge-group-aud" | jq .value | tr -d '"')
                    echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
          
          - name: Exchange token with access
            env:
                    ID_TOKEN: ${{env.ID_TOKEN}}
                    JFROG_PLATFORM_URL: https://psazeuwedge.jfrog.io
            run: |
                    ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://psazeuwedge.jfrog.io/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"github-oidc-edge-group\", \"project_key\": \"\"}" | jq .access_token | tr -d '"')
                    echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV
                    echo "ACCESS_TOKEN=${ACCESS_TOKEN}"
          
          - name: Configure JFrog CLI
            run: |
             jfrog rt config --url ${{ https://psazeuwedge.jfrog.io}} --access-token ${{ secrets.JFROG_ACCESS_TOKEN }} --interactive=false
             jf rt ping
             jf config show
         
          - name: Configure Maven
            # run: jf mvnc --repo-deploy-releases $JFROG_PLATFORM_REPO --repo-deploy-snapshots $JFROG_PLATFORM_REPO --repo-resolve-releases $JFROG_PLATFORM_REPO --repo-resolve-snapshots $JFROG_PLATFORM_REPO
            #run: jf mvnc --repo-resolve-releases optum-main-maven-smart-repo --repo-resolve-snapshots optum-main-maven-smart-repo
            run: jf mvnc --repo-resolve-releases optum-main-smart-virtual --repo-resolve-snapshots optum-main-smart-virtual
         

          - name: Build and Upload JAR to Artifactory
            env:
              JF_URL: https://psazeuwedge.jfrog.io/
              JF_PROJECT: ""
              
            run: |
                 jf config show
                 jf mvn clean compile package

          - name: Setup JFrog CLI JPD
            id: setup-cli-JPD 
            uses: jfrog/setup-jfrog-cli@v4
            env:
                  JF_URL: https://${{ vars.JF_URL }}/
                  JF_PROJECT: optum-main
            with:
                    oidc-provider-name: optum-main-oidc 
                    oidc-audience: optum-main-aud
          
          - name: Build and Upload JAR to Artifactory
            env:
              JF_URL: https://${{ vars.JF_URL }}/ 
              JF_PROJECT: mgm-project
            run: |
                 jf mvnc --repo-deploy-releases $JFROG_PLATFORM_REPO --repo-deploy-snapshots $JFROG_PLATFORM_REPO --repo-resolve-releases $JFROG_PLATFORM_REPO --repo-resolve-snapshots $JFROG_PLATFORM_REPO
                 jf mvn deploy
                 
                              
          - name: Authenticate Docker
            uses: docker/login-action@v3
            with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli-JPD.outputs.oidc-user }}
                password: ${{ steps.setup-cli-JPD.outputs.oidc-token }}

          - name: docker build through 
            run: |  
                jf docker --version
                jf docker build --tag ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} --metadata-file  metadata.json --push .
                
          - name: publish build info
            run: |
                jf config show
                jf rt build-collect-env 
                jf rt build-add-dependencies .
                jf rt build-add-git
                jf rt build-publish
                jf rt bp $CI_JOB_NAME $CI_JOB_ID
                #jf build-scan $CI_JOB_NAME $CI_JOB_ID
       
              
            


