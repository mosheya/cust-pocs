name: CI

on:
  push:
    branches:
      - main
      - dev
      - demo
  pull_request:
    branches:
      - main
permissions:
  actions: read # for detecting the GitHub Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestation.
  contents: read

jobs:
  build-publish-maven:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: optum-main-docker-virtual
      IMAGE_NAME: 'my-very-cool-image:${{ github.run_number }}'
      JF_URL: https://psazuse.jfrog.io/ 
      DOCKER_CLI_EXPERIMENTAL: enabled
      JFROG_PLATFORM_REPO: optum-main-maven-virtual
      JF_PROJECT: optum-main
      

    steps:
      
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup JFrog CLI
        id: setup-cli 
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://psazuse.jfrog.io/
          JF_PROJECT: optum-main
        with:
           oidc-provider-name: optum-main-oidc 
           oidc-audience: optum-main-aud
  
      - name: Verify JFrog CLI Installation
        run: jf -v

      - name: Configure JFrog CLI
        run: |
          jf rt ping
          jf mvnc --repo-deploy-releases=$JFROG_PLATFORM_REPO --repo-deploy-snapshots=$JFROG_PLATFORM_REPO --repo-resolve-releases=$JFROG_PLATFORM_REPO --repo-resolve-snapshots=$JFROG_PLATFORM_REPO

      - name: Build and Upload JAR to Artifactory
        run: jf mvn clean package deploy

      #- name: Audit with JFrog Xray
      #  run: jf audit .

      #- name: Scan with JFrog Xray
      # run: jf scan **/*

      - name: Collect environment variables for build
        run: jf rt bce $GITHUB_JOB $GITHUB_RUN_ID

      - name: Collect VCS details from Git
        run: jf rt bag $GITHUB_JOB $GITHUB_RUN_ID

      - name: Publish build info
        run: |            
          jf rt bp $GITHUB_JOB $GITHUB_RUN_ID
        #  jf build-scan $GITHUB_JOB $GITHUB_RUN_ID

      - name: Authenticate Docker
        uses: docker/login-action@v3
        with:
                registry: ${{ vars.JF_URL }}
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}

      - name: Build Docker image
        run: |  
          jf docker --version
          jf docker build --tag ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} --metadata-file metadata.json --push .

      - name: Scan Docker image
        run: |  
          jf docker pull ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
        #  jf docker scan ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}   

      - name: Gather Docker image metadata
        run: |
          docker inspect ${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} > metadata.json
          echo "----------------"
          cat metadata.json
          echo "----------------"
          digest=$(jq -r '.[0].RepoDigests[0]' metadata.json | awk -F '@' '{print $2}')
          echo "${{ vars.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@$digest" > metadata.json
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json

      - name: Publish build information
        run: |
          jf rt build-collect-env 
          jf rt build-add-dependencies .
          jf rt build-add-git
          jf rt build-publish
       #  jf rt bp $GITHUB_JOB $GITHUB_RUN_ID
       #  jf build-scan $GITHUB_JOB $GITHUB_RUN_ID

         
          
